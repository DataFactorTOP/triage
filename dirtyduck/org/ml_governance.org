#+TITLE: Machine learning governance
#+DESCRIPTION:
#+AUTHOR: Center of Data Science for Public Policy
#+EMAIL: adolfo@uchicago.edu
#+STARTUP: showeverything
#+STARTUP: nohideblocks
#+STARTUP: indent
#+STARTUP: align
#+STARTUP: inlineimages
#+STARTUP: latexpreview
#+PROPERTY: header-args:sql :engine postgresql
#+PROPERTY: header-args:sql+ :dbhost 0.0.0.0
#+PROPERTY: header-args:sql+ :dbport 5434
#+PROPERTY: header-args:sql+ :dbuser food_user
#+PROPERTY: header-args:sql+ :dbpassword some_password
#+PROPERTY: header-args:sql+ :database food
#+PROPERTY: header-args:sql+ :results table drawer
#+PROPERTY: header-args:sql+ :exports both
#+PROPERTY: header-args:sql+ :eval no-export
#+PROPERTY: header-args:sql+ :cmdline -q
#+PROPERTY: header-args:sh  :results verbatim org
#+PROPERTY: header-args:sh+ :prologue exec 2>&1 :epilogue :
#+PROPERTY: header-args:jupyter-python :eval never-export
#+OPTIONS: broken-links:mark
#+OPTIONS: tasks:todo
#+OPTIONS: LaTeX:t
#+EXPORT_FILE_NAME: ../docs/ml_governance.md
#+EXPORT_EXCLUDE_TAGS: noexport

* Machine learning governance

When =triage= executes the experiment, it creates a series of new schemas for
storing the copious output of the experiment. The schemas are
=test_results, train_results=, and =model_metadata=. These schemas
store the metadata of the trained models, features, parameters, and hyperparameters
used in their training. It also stores the predictions and evaluations
of the models on the test sets.

The schema =model_metadata= is composed by the tables:

#+BEGIN_SRC sql
\dt model_metadata.*
#+END_SRC

#+RESULTS:
:RESULTS:
| List of relations |                    |       |          |
|-------------------+--------------------+-------+----------|
| Schema            | Name               | Type  | Owner    |
| model_metadata     | experiment_matrices | table | food_user |
| model_metadata     | experiment_models   | table | food_user |
| model_metadata     | experiments        | table | food_user |
| model_metadata     | list_predictions    | table | food_user |
| model_metadata     | matrices           | table | food_user |
| model_metadata     | model_groups        | table | food_user |
| model_metadata     | models             | table | food_user |
:END:

The tables contained in =test_results= are:

#+BEGIN_SRC sql
\dt test_results.*
#+END_SRC

#+RESULTS:
:RESULTS:
| List of relations |                       |       |          |
|-------------------+-----------------------+-------+----------|
| Schema            | Name                  | Type  | Owner    |
| test_results       | evaluations           | table | food_user |
| test_results       | individual_importances | table | food_user |
| test_results       | predictions           | table | food_user |
:END:

Lastly, if you have interest in how the model performed in the /training/
data sets you could consult =train_results=

#+BEGIN_SRC sql
\dt train_results.*
#+END_SRC

#+RESULTS:
:RESULTS:
| List of relations |                    |       |          |
|-------------------+--------------------+-------+----------|
| Schema            | Name               | Type  | Owner    |
| train_results      | evaluations        | table | food_user |
| train_results      | feature_importances | table | food_user |
| train_results      | predictions        | table | food_user |
:END:

** What are all the results tables about?
=model_groups= stores the algorithm (=model_type=), the
hyperparameters (=hyperparameters=), and the features shared by a
particular set of models. =models= contains data specific to a model:
the =model_group= (you can use =model_group_id= for linking the model to a
model group), temporal information (like =train_end_time=), and the train
matrix UUID (=train_matrix_uuid=). This *UUID* is important
because it's the name of the file in which the matrix is stored.

Lastly, ={train, test}_results.predictions= contains all the /scores/ generated by every
model for every entity. ={train_test}_results.evaluation= stores the value of all the
*metrics* for every model, which were specified in the =scoring=
section in the config file.

*** =model_metadata.experiments=
This table has the two columns: =experiment_hash= and =config=

#+BEGIN_SRC sql
\d model_metadata.experiments
#+END_SRC

#+RESULTS:
:RESULTS:
| Table "model_metadata.experiments"                                                                                                                                            |                   |           |          |         |
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------+-----------+----------+---------|
| Column                                                                                                                                                                       | Type              | Collation | Nullable | Default |
| experiment_hash                                                                                                                                                               | character varying |           | not null |         |
| config                                                                                                                                                                       | jsonb             |           |          |         |
| Indexes:                                                                                                                                                                     |                   |           |          |         |
| "experiments_pkey" PRIMARY KEY, btree (experiment_hash)                                                                                                                        |                   |           |          |         |
| Referenced by:                                                                                                                                                               |                   |           |          |         |
| TABLE "model_metadata.experiment_matrices" CONSTRAINT "experiment_matrices_experiment_hash_fkey" FOREIGN KEY (experiment_hash) REFERENCES model_metadata.experiments(experiment_hash) |                   |           |          |         |
| TABLE "model_metadata.experiment_models" CONSTRAINT "experiment_models_experiment_hash_fkey" FOREIGN KEY (experiment_hash) REFERENCES model_metadata.experiments(experiment_hash)     |                   |           |          |         |
| TABLE "model_metadata.matrices" CONSTRAINT "matrices_built_by_experiment_fkey" FOREIGN KEY (built_by_experiment) REFERENCES model_metadata.experiments(experiment_hash)               |                   |           |          |         |
| TABLE "model_metadata.models" CONSTRAINT "models_experiment_hash_fkey" FOREIGN KEY (built_by_experiment) REFERENCES model_metadata.experiments(experiment_hash)                      |                   |           |          |         |
:END:

=experiment_hash= contains the hash of the configuration file that we used for our
=triage= run.[fn:8] =config= that contains the configuration experiment file
that we used for our =triage= run, stored as =jsonb=.

#+BEGIN_SRC sql
select experiment_hash,
config ->  'user_metadata' as user_metadata
from model_metadata.experiments;
#+END_SRC

#+RESULTS:
:RESULTS:
| experiment_hash                   | user_metadata                                                                                                                                                 |
|----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------|
| 67a1d564d31811b9c20ca63672c25abd | {"org": "DSaPP", "team": "Tutorial", "author": "Adolfo De Unanue", "etl_date": "2019-02-21", "experiment_type": "test", "label_definition": "failed_inspection"} |
:END:


We could use the following advice: If we are interested in all models
that resulted from a certain config, we could lookup that config in
=model_metadata.experiments= and then use its =experiment_hash= on other tables
to find all the models that resulted from that configuration.

*** =metadata_model.model_groups=

Do you remember how we defined in =grid_config= the different
classifiers that we want =triage= to train? For example, we could use
in a configuration file the following:

#+BEGIN_SRC yaml
    'sklearn.tree.DecisionTreeClassifier':
        criterion: ['entropy']
        max_depth: [1, 2, 5, 10]
        random_state: [2193]
#+END_SRC

By doing so, we are saying that we want to train 4 decision trees
(=max_depth= is one of =1, 2, 5, 10=). However, remember that we are using
temporal crossvalidation to build our models, so we are
going to have different temporal slices that we are training
models on, e.g., 2010-2011, 2011-2012, etc.

Therefore, we are going to train our four
decision trees on each temporal slice. Therefore, the trained model (or
the instance of that model) will change across temporal splits, but the
configuration will remain the same. This table lets us keep track of
the different configurations (=model_groups=) and gives us an =id= for
each configuration (=model_group_id=). We can leverage the =model_group_id=
to find all the models that were trained using the same config
but on different slices of time.

In our simple test configuration file we have:

#+BEGIN_SRC yaml
    'sklearn.dummy.DummyClassifier':
        strategy: [most_frequent]
#+END_SRC

Therefore, if we run the following

#+BEGIN_SRC sql
select
    model_group_id,
    model_type,
    hyperparameters,
    model_config -> 'feature_groups' as feature_groups,
    model_config -> 'cohort_name' as cohort,
    model_config -> 'label_name' as label,
    model_config -> 'label_definition' as label_definition,
    model_config -> 'experiment_type' as experiment_type,
    model_config -> 'etl_date' as etl_date
from
    model_metadata.model_groups;
#+END_SRC

#+RESULTS:
:RESULTS:
| model_group_id | model_type                     | hyperparameters              | feature_groups                                               | cohort           | label               | label_definition    | experiment_type | etl_date      |
|--------------+-------------------------------+------------------------------+-------------------------------------------------------------+------------------+---------------------+--------------------+----------------+--------------|
|            1 | sklearn.dummy.DummyClassifier | {"strategy": "most_frequent"} | ["prefix: results", "prefix: risks", "prefix: inspections"] | "test_facilities" | "failed_inspections" | "failed_inspection" | "test"         | "2019-02-21" |
:END:

You can see that a model group is defined by the classifier
(=model_type=), its hyperparameters (=hyperparameters=), the features
(=feature_list=) (not shown), and the =model_config=.

The field =model_config= is created using information from the block
=model_group_keys=. In our test configuration file the block is:

#+BEGIN_SRC yaml
model_group_keys:
  - 'class_path'
  - 'parameters'
  - 'feature_names'
  - 'feature_groups'
  - 'cohort_name'
  - 'state'
  - 'label_name'
  - 'label_timespan'
  - 'training_as_of_date_frequency'
  - 'max_training_history'
  - 'label_definition'
  - 'experiment_type'
  - 'org'
  - 'team'
  - 'author'
  - 'etl_date'
#+END_SRC


/What can we learn from that?/ For example, if we add a new feature and
rerun =triage=, =triage= will create a new =model_group= even if the
classifier and the =hyperparameters= are the same as before.

*** =model_metadata.models=

This table stores the information about our actual /models/, i.e.,
instances of our classifiers trained on specific temporal slices.
#+BEGIN_SRC sql
\d model_metadata.models
#+END_SRC

#+RESULTS:
:RESULTS:
| Table "model_metadata.models"                                                                                                                           |                             |           |          |                                                     |
|--------------------------------------------------------------------------------------------------------------------------------------------------------+-----------------------------+-----------+----------+-----------------------------------------------------|
| Column                                                                                                                                                 | Type                        | Collation | Nullable | Default                                             |
| model_id                                                                                                                                                | integer                     |           | not null | nextval('model_metadata.models_model_id_seq'::regclass) |
| model_group_id                                                                                                                                           | integer                     |           |          |                                                     |
| model_hash                                                                                                                                              | character varying           |           |          |                                                     |
| run_time                                                                                                                                                | timestamp without time zone |           |          |                                                     |
| batch_run_time                                                                                                                                           | timestamp without time zone |           |          |                                                     |
| model_type                                                                                                                                              | character varying           |           |          |                                                     |
| hyperparameters                                                                                                                                        | jsonb                       |           |          |                                                     |
| model_comment                                                                                                                                           | text                        |           |          |                                                     |
| batch_comment                                                                                                                                           | text                        |           |          |                                                     |
| config                                                                                                                                                 | json                        |           |          |                                                     |
| built_by_experiment                                                                                                                                      | character varying           |           |          |                                                     |
| train_end_time                                                                                                                                           | timestamp without time zone |           |          |                                                     |
| test                                                                                                                                                   | boolean                     |           |          |                                                     |
| train_matrix_uuid                                                                                                                                        | text                        |           |          |                                                     |
| training_label_timespan                                                                                                                                  | interval                    |           |          |                                                     |
| model_size                                                                                                                                              | real                        |           |          |                                                     |
| Indexes:                                                                                                                                               |                             |           |          |                                                     |
| "models_pkey" PRIMARY KEY, btree (model_id)                                                                                                              |                             |           |          |                                                     |
| "ix_results_models_model_hash" UNIQUE, btree (model_hash)                                                                                                   |                             |           |          |                                                     |
| Foreign-key constraints:                                                                                                                               |                             |           |          |                                                     |
| "matrix_uuid_for_models" FOREIGN KEY (train_matrix_uuid) REFERENCES model_metadata.matrices(matrix_uuid)                                                      |                             |           |          |                                                     |
| "models_experiment_hash_fkey" FOREIGN KEY (built_by_experiment) REFERENCES model_metadata.experiments(experiment_hash)                                        |                             |           |          |                                                     |
| "models_model_group_id_fkey" FOREIGN KEY (model_group_id) REFERENCES model_metadata.model_groups(model_group_id)                                                 |                             |           |          |                                                     |
| Referenced by:                                                                                                                                         |                             |           |          |                                                     |
| TABLE "test_results.evaluations" CONSTRAINT "evaluations_model_id_fkey" FOREIGN KEY (model_id) REFERENCES model_metadata.models(model_id)                     |                             |           |          |                                                     |
| TABLE "train_results.feature_importances" CONSTRAINT "feature_importances_model_id_fkey" FOREIGN KEY (model_id) REFERENCES model_metadata.models(model_id)      |                             |           |          |                                                     |
| TABLE "test_results.individual_importances" CONSTRAINT "individual_importances_model_id_fkey" FOREIGN KEY (model_id) REFERENCES model_metadata.models(model_id) |                             |           |          |                                                     |
| TABLE "model_metadata.list_predictions" CONSTRAINT "list_predictions_model_id_fkey" FOREIGN KEY (model_id) REFERENCES model_metadata.models(model_id)           |                             |           |          |                                                     |
| TABLE "test_results.predictions" CONSTRAINT "predictions_model_id_fkey" FOREIGN KEY (model_id) REFERENCES model_metadata.models(model_id)                     |                             |           |          |                                                     |
| TABLE "train_results.evaluations" CONSTRAINT "train_evaluations_model_id_fkey" FOREIGN KEY (model_id) REFERENCES model_metadata.models(model_id)               |                             |           |          |                                                     |
| TABLE "train_results.predictions" CONSTRAINT "train_predictions_model_id_fkey" FOREIGN KEY (model_id) REFERENCES model_metadata.models(model_id)               |                             |           |          |                                                     |
:END:

Noteworthy columns are:

    - =model_id= :: The id of the model (i.e., instance...). We will
                    use this ID to trace a model evaluation
                    to a =model_group= and vice versa.
    - =model_group_id= :: The id of the models /model group/ we encountered above.
    - =model_hash= :: The /hash/ of our model. We can use the hash to
                      load the actual model. It gets stored under
                      =TRIAGE_OUTPUT_PATH/trained_models/{model_hash}=. We
                      are going to this later to look at a trained
                      decision tree.
    - =run_time= ::  Time when the model was trained.
    - =model_type= ::  The algorithm used for training.
    - =model_comment= :: Literally the text in the =model_comment= block
         in the configuration file
    - =hyperparameters= :: Hyperparameters used for the model
         configuration.
    - =built_by_experiment= :: The hash of our experiment. We encountered this value in the =results.experiments= table before.
    - =train_end_time= :: When building the training matrix, we included training samples up to this date.
    - =train_matrix_uuid= :: The /hash/ of the matrix that we used to
         train this model. The matrix gets stored as =csv= under
        =TRIAGE_OUTPUT_PATH/matrices/{train_matrix_uuid}.csv=. This is helpful
        when trying to inspect the matrix and features that were used
        for training.
    - =train_label_timespan= :: How big was our window to get the labels for our training
        matrix? For example, a =train_label_window= of 1 year would
        mean that we look one year from a given date in the training
        matrix into the future to find the label for that training
        sample.


*** =model_metadata.matrices=

This schema contains information about the matrices used in the model's
training. You could use this information to debug your
models. Important columns are =matrix_uuid= (The matrix gets stored as
        =TRIAGE_OUTPUT_PATH/matrices/{train_matrix_uuid}.csv=),
=matrix_type= (indicated if the matrix was used for /training/ models or
/testing/ them), =lookback_duration= and =feature_starttime= (give
information about the temporal setting of the features) and =num_observations=
(size of the matrices).


#+BEGIN_SRC sql
\d model_metadata.matrices
#+END_SRC

#+RESULTS:
:RESULTS:
| Table "model_metadata.matrices"                                                                                                                      |                             |           |          |         |
|-----------------------------------------------------------------------------------------------------------------------------------------------------+-----------------------------+-----------+----------+---------|
| Column                                                                                                                                              | Type                        | Collation | Nullable | Default |
| matrix_id                                                                                                                                            | character varying           |           |          |         |
| matrix_uuid                                                                                                                                          | character varying           |           | not null |         |
| matrix_type                                                                                                                                          | character varying           |           |          |         |
| labeling_window                                                                                                                                      | interval                    |           |          |         |
| num_observations                                                                                                                                     | integer                     |           |          |         |
| creation_time                                                                                                                                        | timestamp with time zone    |           |          | now()   |
| lookback_duration                                                                                                                                    | interval                    |           |          |         |
| feature_start_time                                                                                                                                    | timestamp without time zone |           |          |         |
| matrix_metadata                                                                                                                                      | jsonb                       |           |          |         |
| built_by_experiment                                                                                                                                   | character varying           |           |          |         |
| Indexes:                                                                                                                                            |                             |           |          |         |
| "matrices_pkey" PRIMARY KEY, btree (matrix_uuid)                                                                                                      |                             |           |          |         |
| "ix_model_metadata_matrices_matrix_uuid" UNIQUE, btree (matrix_uuid)                                                                                      |                             |           |          |         |
| Foreign-key constraints:                                                                                                                            |                             |           |          |         |
| "matrices_built_by_experiment_fkey" FOREIGN KEY (built_by_experiment) REFERENCES model_metadata.experiments(experiment_hash)                                |                             |           |          |         |
| Referenced by:                                                                                                                                      |                             |           |          |         |
| TABLE "test_results.evaluations" CONSTRAINT "evaluations_matrix_uuid_fkey" FOREIGN KEY (matrix_uuid) REFERENCES model_metadata.matrices(matrix_uuid)       |                             |           |          |         |
| TABLE "train_results.evaluations" CONSTRAINT "evaluations_matrix_uuid_fkey" FOREIGN KEY (matrix_uuid) REFERENCES model_metadata.matrices(matrix_uuid)      |                             |           |          |         |
| TABLE "model_metadata.models" CONSTRAINT "matrix_uuid_for_models" FOREIGN KEY (train_matrix_uuid) REFERENCES model_metadata.matrices(matrix_uuid)           |                             |           |          |         |
| TABLE "test_results.predictions" CONSTRAINT "matrix_uuid_for_testpred" FOREIGN KEY (matrix_uuid) REFERENCES model_metadata.matrices(matrix_uuid)           |                             |           |          |         |
| TABLE "train_results.predictions" CONSTRAINT "matrix_uuid_for_trainpred" FOREIGN KEY (matrix_uuid) REFERENCES model_metadata.matrices(matrix_uuid)         |                             |           |          |         |
| TABLE "train_results.predictions" CONSTRAINT "train_predictions_matrix_uuid_fkey" FOREIGN KEY (matrix_uuid) REFERENCES model_metadata.matrices(matrix_uuid) |                             |           |          |         |
:END:


*** ={test, train}_results.evaluations=

These tables lets us analyze how well our models are doing. Based on the
config that we used for our =triage= run, =triage= is calculating metrics
and storing them in this table, e.g., our model's precision in top 10%.

#+BEGIN_SRC sql
\d test_results.evaluations
#+END_SRC

#+RESULTS:
:RESULTS:
| Table "test_results.evaluations"                                                                                              |                             |           |          |         |
|------------------------------------------------------------------------------------------------------------------------------+-----------------------------+-----------+----------+---------|
| Column                                                                                                                       | Type                        | Collation | Nullable | Default |
| model_id                                                                                                                      | integer                     |           | not null |         |
| evaluation_start_time                                                                                                          | timestamp without time zone |           | not null |         |
| evaluation_end_time                                                                                                            | timestamp without time zone |           | not null |         |
| as_of_date_frequency                                                                                                            | interval                    |           | not null |         |
| metric                                                                                                                       | character varying           |           | not null |         |
| parameter                                                                                                                    | character varying           |           | not null |         |
| value                                                                                                                        | numeric                     |           |          |         |
| num_labeled_examples                                                                                                           | integer                     |           |          |         |
| num_labeled_above_threshold                                                                                                     | integer                     |           |          |         |
| num_positive_labels                                                                                                            | integer                     |           |          |         |
| sort_seed                                                                                                                     | integer                     |           |          |         |
| matrix_uuid                                                                                                                   | text                        |           |          |         |
| Indexes:                                                                                                                     |                             |           |          |         |
| "evaluations_pkey" PRIMARY KEY, btree (model_id, evaluation_start_time, evaluation_end_time, as_of_date_frequency, metric, parameter) |                             |           |          |         |
| Foreign-key constraints:                                                                                                     |                             |           |          |         |
| "evaluations_matrix_uuid_fkey" FOREIGN KEY (matrix_uuid) REFERENCES model_metadata.matrices(matrix_uuid)                           |                             |           |          |         |
| "evaluations_model_id_fkey" FOREIGN KEY (model_id) REFERENCES model_metadata.models(model_id)                                      |                             |           |          |         |
:END:

Its columns are:

    - =model_id= :: Our beloved =model_id= that we have encountered before.
    - =evaluation_start_time= :: After training the model, we evaluate
         it on a test matrix. This column tells us the earliest time
         that an example in our test matrix could have.
    - =evaluation_end_time= ::  After training the model, we evaluate
      it on a test matrix. This column tells us the latest time that
      an example in our test matrix could have.
    - =metric= :: Indicates which metric we are evaluating, e.g., =precision@=.
    - =parameter= ::Indicates at which parameter we are evaluating our
      metric, e.g., a metric of precision@ and a parameter of
      =100.0_pct= shows us the =precision@100pct=.
    - =value= :: The value observed for our metric@parameter.
    - =num_labeled_examples= :: The number of labeled examples in our
         test matrix. Why does it matter? It could be the case that we
         have entities that have no label for the test timeframe (for example,
         not all facilities will have an inspection). We still want to make
         predictions for these entities but can't include them when
         calculating performance metrics.
    - =num_labeled_above_threshold= ::    How many examples above our threshold were labeled?
    - =num_positive_labels= :: The number of rows that had true positive labels.

A look at the table shows that we have multiple rows for each model, each
showing a different performance metric.

#+BEGIN_SRC sql
select
    evaluation_end_time,
    model_id,
    metric || parameter as metric,
    value,
    num_labeled_examples,
    num_labeled_above_threshold,
    num_positive_labels
from
    test_results.evaluations
where
    parameter = '100.0_pct';
#+END_SRC

#+RESULTS:
:RESULTS:
| evaluation_end_time   | model_id | metric             |              value | num_labeled_examples | num_labeled_above_threshold | num_positive_labels |
|---------------------+---------+--------------------+--------------------+--------------------+--------------------------+-------------------|
| 2016-01-01 00:00:00 |       1 | precision@100.0_pct | 0.6666666666666666 |                  3 |                        3 |                 2 |
| 2016-01-01 00:00:00 |       1 | recall@100.0_pct    |                1.0 |                  3 |                        3 |                 2 |
| 2017-01-01 00:00:00 |       2 | precision@100.0_pct | 0.3333333333333333 |                  3 |                        3 |                 1 |
| 2017-01-01 00:00:00 |       2 | recall@100.0_pct    |                1.0 |                  3 |                        3 |                 1 |
:END:

#+BEGIN_QUOTE
Remember that at 100%, the =recall= should be 1, and the =precision= is
equal to the /baserate/. If these two things don't match, there are
problems in your data, pipeline, etl. You must get this correct!
#+END_QUOTE

/What does this query tell us?/

We can now see how the different instances (trained on different temporal
slices, but with the same model params) of a model group performs over
time.  Note how we only included the /models/ that belong to our
/model group/ =1=.

*** ={test, train}_results.predictions=

You can think of the previous table ={test, train}_results.{test,
train}_predictions= as a summary
of individuals predictions that our model is making. But where can you
find the individual predictions that our model is making? (So you can
generate a list from here). And where can we find the test matrix that
the  predictions are based on? Let us introduce you to the
=results.predictions= table.

Here is what its first row looks like:

#+NAME: prediction-example
#+BEGIN_SRC sql
select
    model_id,
    entity_id,
    as_of_date,
    score,
    label_value,
    matrix_uuid
from
    test_results.predictions
where
    model_id = 1
order by score desc;
#+END_SRC

#+RESULTS: prediction-example
:RESULTS:
| model_id | entity_id | as_of_date            | score | label_value | matrix_uuid                       |
|---------+----------+---------------------+-------+------------+----------------------------------|
|       1 |      229 | 2016-01-01 00:00:00 |   1.0 |          1 | cd0ae68d6ace43033b49ee0390c3583e |
|       1 |      355 | 2016-01-01 00:00:00 |   1.0 |          1 | cd0ae68d6ace43033b49ee0390c3583e |
|       1 |      840 | 2016-01-01 00:00:00 |   1.0 |          0 | cd0ae68d6ace43033b49ee0390c3583e |
:END:


As you can see, the table contains our models' predictions for a given
entity and date.

And do you notice the field =matrix_uuid=? Doesn't it look similar to
the fields from above that gave us the names of our training matrices?
In fact, it is the same. You can find the test matrix that was used to
make this prediction under =TRIAGE_OUTPUT_PATH/matrices/{matrix_uuid}.csv=.

*** ={test, train}_results.feature_importances=

This tables store the feature importance of all the models.


* Footnotes

[fn:8] Literally from the configuration file. If you modify something it will generate a new hash. Handle with care!
